import itertools, zstd
import time

from SwissProtUtils import parse_raw_swiss

recs = parse_raw_swiss('/Volumes/Space/protein/uniprot_trembl.dat.bgz')


training_data = list(itertools.islice(recs, 0, 50000000, 50))


dict_data16 = zstd.train_dictionary(2**16, training_data, notifications=True)
print('done16')
dict_data14 = zstd.train_dictionary(2**14, training_data, notifications=True)
print('done14')
dict_data12 = zstd.train_dictionary(2**12, training_data, notifications=True)
print('done12')
dict_data_cov16 = zstd.train_cover_dictionary(2**16, training_data,
                   optimize=True, threads=16, notifications=True, steps=16)
print('donec16')

c = zstd.ZstdCompressor()

c16 = zstd.ZstdCompressor(dict_data=dict_data16)

c14 = zstd.ZstdCompressor(dict_data=dict_data14)

c12 = zstd.ZstdCompressor(dict_data=dict_data12)

cc16 = zstd.ZstdCompressor(dict_data=dict_data_cov16)

valid_data = list(itertools.islice(recs, 10000))

def comp_metric(comp, r):
    s=time.time()
    d=comp.compress(r)
    t = time.time()-s
    return len(d), t

def test_comp(compressor):
    sizes, times = list(zip(*[comp_metric(compressor, r) for r in training_data]))

    return np.array(sizes, dtype=int), np.array(times, dtype=float)

c_s, c_t = test_comp(c)
c16_s, c16_t = test_comp(c16)
c14_s, c14_t = test_comp(c14)
c12_s, c12_t = test_comp(c12)
cc16_s, cc16_t = test_comp(cc16)

print("C: {}, {:.3f}".format(c_s.mean(), c_t.mean()*1000)
print("C12: {}, {:.3f}".format(c12_s.mean(), c12_t.mean()*1000)
print("C14: {}, {:.3f}".format(c14_s.mean(), c14_t.mean()*1000)
print("C16: {}, {:.3f}".format(c16_s.mean(), c16_t.mean()*1000)
print("CC16: {}, {:.3f}".format(cc16_s.mean(), cc16_t.mean()*1000)
